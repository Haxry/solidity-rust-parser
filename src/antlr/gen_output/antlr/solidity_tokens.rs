use std::collections::HashMap;
use antlr_rust::token::Token;

fn get_token_map() -> HashMap<usize, &'static str> {
    let mut tokens = HashMap::new();

    tokens.insert(1, "pragma");
    tokens.insert(2, ";");
    tokens.insert(3, "*");
    tokens.insert(4, "||");
    tokens.insert(5, "^");
    tokens.insert(6, "~");
    tokens.insert(7, ">=");
    tokens.insert(8, ">");
    tokens.insert(9, "<");
    tokens.insert(10, "<=");
    tokens.insert(11, "=");
    tokens.insert(12, "as");
    tokens.insert(13, "import");
    tokens.insert(14, "from");
    tokens.insert(15, "{");
    tokens.insert(16, ",");
    tokens.insert(17, "}");
    tokens.insert(18, "abstract");
    tokens.insert(19, "contract");
    tokens.insert(20, "interface");
    tokens.insert(21, "library");
    tokens.insert(22, "is");
    tokens.insert(23, "(");
    tokens.insert(24, ")");
    tokens.insert(25, "error");
    tokens.insert(26, "using");
    tokens.insert(27, "for");
    tokens.insert(28, "|");
    tokens.insert(29, "&");
    tokens.insert(30, "+");
    tokens.insert(31, "-");
    tokens.insert(32, "/");
    tokens.insert(33, "%");
    tokens.insert(34, "==");
    tokens.insert(35, "!=");
    tokens.insert(36, "struct");
    tokens.insert(37, "modifier");
    tokens.insert(38, "function");
    tokens.insert(39, "returns");
    tokens.insert(40, "event");
    tokens.insert(41, "enum");
    tokens.insert(42, "[");
    tokens.insert(43, "]");
    tokens.insert(44, "address");
    tokens.insert(45, ".");
    tokens.insert(46, "mapping");
    tokens.insert(47, "=>");
    tokens.insert(48, "memory");
    tokens.insert(49, "storage");
    tokens.insert(50, "calldata");
    tokens.insert(51, "if");
    tokens.insert(52, "else");
    tokens.insert(53, "try");
    tokens.insert(54, "catch");
    tokens.insert(55, "while");
    tokens.insert(56, "unchecked");
    tokens.insert(57, "assembly");
    tokens.insert(58, "do");
    tokens.insert(59, "return");
    tokens.insert(60, "throw");
    tokens.insert(61, "emit");
    tokens.insert(62, "revert");
    tokens.insert(63, "var");
    tokens.insert(64, "bool");
    tokens.insert(65, "string");
    tokens.insert(66, "byte");
    tokens.insert(67, "++");
    tokens.insert(68, "--");
    tokens.insert(69, "new");
    tokens.insert(70, ":");
    tokens.insert(71, "delete");
    tokens.insert(72, "!");
    tokens.insert(73, "**");
    tokens.insert(74, "<<");
    tokens.insert(75, ">>");
    tokens.insert(76, "&&");
    tokens.insert(77, "?");
    tokens.insert(78, "|=");
    tokens.insert(79, "^=");
    tokens.insert(80, "&=");
    tokens.insert(81, "<<=");
    tokens.insert(82, ">>=");
    tokens.insert(83, "+=");
    tokens.insert(84, "-=");
    tokens.insert(85, "*=");
    tokens.insert(86, "/=");
    tokens.insert(87, "%=");
    tokens.insert(88, "let");
    tokens.insert(89, ":=");
    tokens.insert(90, "=:");
    tokens.insert(91, "switch");
    tokens.insert(92, "case");
    tokens.insert(93, "default");
    tokens.insert(94, "->");
    tokens.insert(95, "callback");
    tokens.insert(96, "override");
    tokens.insert(97, "Int");
    tokens.insert(98, "Uint");
    tokens.insert(99, "Byte");
    tokens.insert(100, "Fixed");
    tokens.insert(101, "Ufixed");
    tokens.insert(102, "BooleanLiteral");
    tokens.insert(103, "DecimalNumber");
    tokens.insert(104, "HexNumber");
    tokens.insert(105, "NumberUnit");
    tokens.insert(106, "HexLiteralFragment");
    tokens.insert(107, "ReservedKeyword");
    tokens.insert(108, "anonymous");
    tokens.insert(109, "break");
    tokens.insert(110, "constant");
    tokens.insert(111, "immutable");
    tokens.insert(112, "continue");
    tokens.insert(113, "leave");
    tokens.insert(114, "external");
    tokens.insert(115, "indexed");
    tokens.insert(116, "internal");
    tokens.insert(117, "payable");
    tokens.insert(118, "private");
    tokens.insert(119, "public");
    tokens.insert(120, "virtual");
    tokens.insert(121, "pure");
    tokens.insert(122, "type");
    tokens.insert(123, "view");
    tokens.insert(124, "global");
    tokens.insert(125, "constructor");
    tokens.insert(126, "fallback");
    tokens.insert(127, "receive");
    tokens.insert(128, "Identifier");
    tokens.insert(129, "StringLiteralFragment");
    tokens.insert(130, "VersionLiteral");
    tokens.insert(131, "WS");
    tokens.insert(132, "COMMENT");
    tokens.insert(133, "LINE_COMMENT");

    tokens
}
